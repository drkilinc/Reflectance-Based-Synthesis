function [C_HP,L_HP,C_LP,L_LP,Termination] = BandPassLadderSynthesis_Yarman(KFlag,R0,f0,ndc,a,b)
% This function generates actual elements values for a given immittance
% function generated by Real Frequency Techniques
% The immitance function F(p) is defined as F(p)=a(p)/b(p) where the
% leading coefficient a(1)=0 and b(1)>0. Therefore, F(p) is a minimum
% function with ladder even part: Even{F(p)}=a0*p^(2*ndc)/B(p^2)
% KFlag is the notification of the immitance F(p)=a(p)/b(p).
% R0 is the normalization number which is usually 50 ohm.
% f0 is the normalization frequency given in actual value
% -------------------------------------------------------------------------
%  Inputs
%           KFlag:  KFlag=1 ZB=F(p)=a(p)/b(p) is a minimum impedance
%                   KFlag=0 YB=F(p)=a(p)/b(p) is a minimum admittance
%           R0: De-normalization resistance
%           f0: De-normalization frequency
%           ndc:Transmission zeros at DC which determines total highpass
%           elements i.e. seires capacitors (C_HP) and shunt inductors
%           (L_HP)
%           a(p) numerator polynomial of F(p)
%           b(p) denominator polynomial of F(p)
% Ouputs:
%           C_HP: Actual Value of the Series Capacitor (Highpass Element)
%           L_HP: Actual Value of the Shunt Inductor (Highpass Element)
%           C_LP: Actual Value of the Shunt Capacitor (Lowpass Element)
%           L_LP: Actual Value of the Series Inductor (Lowpass Element)
% -------------------------------------------------------------------------
%
[k,q,Highpass_Elements,Lowpass_Elements]=GeneralSynthesis_Yarman(a,b);
na=length(a);na1=na-1;
n1=length(q);
n=n1-1;
if ndc>0
        if KFlag==1;%Design='Synthesis with Minimum Impedance Function Z(p)=a(p)/b(p)' 
% Minimum Reactance impedance synthesis: We start with shunt inductor
%
for i=1:ndc;% Generation of Highpass Elements:
    eo=even_odd(i);% Determine i if it is odd or even
    if eo==1; % Odd case we have shunt inductor (Min. Reac. case)
        L_HP(i)=Highpass_Elements(i)*R0/2/pi/f0;%LH='This is a shunt inductor'
        C_HP(i)=0;
    end
    if eo==0; %Even case
        C_HP(i)=Highpass_Elements(i)/R0/2/pi/f0;%CH='This is a series capacitor'
        L_HP(i)=0;
    end
end
% Generation of Lowpass Elements: KFlag==1; we start with shunt capacitor
        for j=1:n
            eo=even_odd(j);
    if eo==1; % Odd case: we have shunt Capacitor C_LP (Min. Reac. case)
        C_LP(j)=Lowpass_Elements(j)/R0/2/pi/f0;%CL='This is a shunt capacitor'
        L_LP(j)=0;
    end
    if eo==0; %Even case: we have a series Inductor L_LP
        L_LP(j)=Lowpass_Elements(j)*R0/2/pi/f0;%LL='This is a series inductor'
        C_LP(j)=0;
    end
        end
        % Actual Computation of Termination: KFlag==1 Minimum Reactance
        % Case
         neo=even_odd(n);
         if neo==1;Termination=R0/Lowpass_Elements(n1);% 'This is changed to a resistor'
         end
         if neo==0;Termination=Lowpass_Elements(n1)*R0;% 'This is a resistance'
         end   
        end
end
%
%--------------------------------------------------------------------------
% Minimum Admittance Case: KFlag==0
if ndc>0
if KFlag==0;%Design='Synthesis with Minimum Admittance Function Y(p)=a(p)/b(p)'
% Minimum Suseptance: Adimttance synthesis: We start with shunt inductor
%
for i=1:ndc;% Generation of Highpass Elements:
    eo=even_odd(i);% Determine i if it is odd or even
    if eo==1; % Odd case we have series capacitor (Min.Sust. case)
        C_HP(i)=Highpass_Elements(i)/R0/2/pi/f0;%CH='This is a series capacitor'
        L_HP(i)=0;
    end
    if eo==0; %Even case: Shunt Inductor 
        L_HP(i)=Highpass_Elements(i)*R0/2/pi/f0;%LH='This is a shunt inductor'
        C_HP(i)=0;
    end
end
% Generation of Lowpass Elements: KFlag==0 Case; Minimum Suseptance
        for j=1:n
            eo=even_odd(j);
    if eo==1; % Odd case: we have series inductor L_LP (Min.Suspt. case)
        L_LP(j)=Lowpass_Elements(j)*R0/2/pi/f0;%LL='This is a series inductor'
        C_LP(j)=0;
    end
    if eo==0; %Even case: we have a shunt Capacitor C_LP
        C_LP(j)=Lowpass_Elements(j)/R0/2/pi/f0;%CL='Shunt Capacitor'
        L_LP(j)=0;
    end
        end
         neo=even_odd(n);
         if neo==1;Termination=Lowpass_Elements(n1)*R0;% 'This is a resistance'
         end
         if neo==0;Termination=R0/Lowpass_Elements(n1);% 'This is changed to a resistor'
         end
end
end
%--------------------------------------------------------------------------
if ndc==0
                C_HP=0;%C_HP='This is a lowpass design with ndc=0',
                L_HP=0;%L_HP='This is a lowpass design with ndc=0',
if KFlag==1;%Design='Synthesis with Minimum Impedance Function Z(p)=a(p)/b(p)'         
% Minimum Reactance impedance synthesis: We start with shunt capacitor
% Generation of Lowpass Elements: Starting with a shunt capacitor
        for j=1:n
            eo=even_odd(j);
    if eo==1; % Odd case: we have shunt Capacitor C_LP (Min. Reac. case)
        C_LP(j)=Lowpass_Elements(j)/R0/2/pi/f0;%CL='This is a shunt capacitor'
        L_LP(j)=0;
    end
    if eo==0; %Even case: we have a series Inductor L_LP
        L_LP(j)=Lowpass_Elements(j)*R0/2/pi/f0;%LL='This is a series inductor'
        C_LP(j)=0;
    end
        end
        neo=even_odd(n);
         if neo==1;Termination=R0/Lowpass_Elements(n1);% 'This is cahanged to a resistor'
         end
         if neo==0;Termination=Lowpass_Elements(n1)*R0;% 'This is a resistor'
         end 
end
end
%--------------------------------------------------------------------------
% Minimum Admittance Case:
if ndc==0
    if KFlag==0;%Design='Synthesis with Minimum Admittance Function Y(p)=a(p)/b(p)'
         C_HP=0;%C_HP='This is a lowpass design with ndc=0',
         L_HP=0;%L_HP='This is a lowpass design with ndc=0',
% Minimum Suseptance: Adimttance synthesis: We start with shunt inductor
% Generation of Lowpass Elements: KFlag==0 Case starting with series a
% inductor
        for j=1:n
            eo=even_odd(j);
    if eo==1; % Odd case: we have series inductor L_LP (Min.Suspt. case)
        L_LP(j)=Lowpass_Elements(j)*R0/2/pi/f0;%LL='This is a series inductor'
        C_LP(j)=0;
    end
    if eo==0; %Even case: we have a shunt Capacitor C_LP
        C_LP(j)=Lowpass_Elements(j)/R0/2/pi/f0;%CL='This is a Shunt Capacitor'
        L_LP(j)=0;
    end
        end
       neo=even_odd(n);
         if neo==1;Termination=Lowpass_Elements(n1)*R0;% 'This is a resistance'
         end
         if neo==0;Termination=R0/Lowpass_Elements(n1);% 'This is changed to a resistor'
         end
    end
end
%
%--------------------------------------------------------------------------
% ndc=n case: This is a fully highpass ladder in constant termination
if ndc==na1
                Highpass_Elements(ndc+1)=a(1)/b(1);
                C_LP=0;%C_LP='This is a highpass design with ndc=n',
                L_LP=0;%L_LP='This is a highpass design with ndc=n',
if KFlag==1;%Design='Synthesis with Minimum Impedance Function Z(p)=a(p)/b(p)'
% Minimum Reactance impedance synthesis: We start with shunt inductor
% Generation of Highpass Elements: Starting with a shunt inductor
        for j=1:ndc
            eo=even_odd(j);
    if eo==1; % Odd case: we have shunt inductor L_HP (Min. Reac. case)
        L_HP(j)=Highpass_Elements(j)*R0/2/pi/f0;%LHP='This is a shunt inductor'
        C_HP(j)=0;
    end
    if eo==0; %Even case: we have a series capacitor C_HP
        C_HP(j)=Highpass_Elements(j)/R0/2/pi/f0;%CHP='This is a series capacitor'
        L_HP(j)=0;
    end
        end
        neo=even_odd(n);
         if neo==1;Termination=R0/Highpass_Elements(ndc+1);% 'This is changed to a resistor'
         end
         if neo==0;Termination=Highpass_Elements(ndc+1)*R0;% 'This is a resistor'
         end 
end
end
%--------------------------------------------------------------------------
% Minimum Admittance Case:
if ndc==na1
    if KFlag==0;%Design='Synthesis with Minimum Admittance Function Y(p)=a(p)/b(p)'
         Highpass_Elements(ndc+1)=a(1)/b(1);%Termination
         C_LP=0;%C_LP='This is a highpass design with ndc=n',
         L_LP=0;%L_LP='This is a highpass design with ndc=n',
% Minimum Suseptance: Adimttance synthesis: We start with a series
% capacitor
% Generation of highpass Elements: KFlag==0 Case starting with series a
% capacitor
        for j=1:n
            eo=even_odd(j);
    if eo==1; % Odd case: we have series capacitor C_HP (Min.Suspt. case)
        C_HP(j)=Highpass_Elements(j)/R0/2/pi/f0;%CHP='This is a series capacitor'
        L_HP(j)=0;
    end
    if eo==0; %Even case: we have a shunt inductor L_HP
        L_HP(j)=Highpass_Elements(j)*R0/2/pi/f0;%CL='This is a Shunt Inductor'
        C_HP(j)=0;
    end
        end
       neo=even_odd(n);
         if neo==1;Termination=Highpass_Elements(ndc+1)*R0;% 'This is a resistance'
         end
         if neo==0;Termination=R0/Highpass_Elements(ndc+1);% 'This is changed to a resistor'
         end
    end
end



%--------------------------------End of Function --------------------------
end